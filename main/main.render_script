--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end


local function create_rt(w,h, filter, has_depth)
    local color_params = {
        format     = render.FORMAT_RGBA,
        width      = w,
        height     = h,
        min_filter = filter,
        mag_filter = filter,
        u_wrap     = render.WRAP_CLAMP_TO_EDGE,
        v_wrap     = render.WRAP_CLAMP_TO_EDGE }

    local depth_params = { 
        format        = render.FORMAT_DEPTH,
        width         = w,
        height        = h,
        min_filter    = filter,
        mag_filter    = filter,
        u_wrap        = render.WRAP_CLAMP_TO_EDGE,
        v_wrap        = render.WRAP_CLAMP_TO_EDGE }
        
    if has_depth then
        return render.render_target("buffer", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params })
    end
    return render.render_target("buffer", {[render.BUFFER_COLOR_BIT] = color_params })
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.quad_pred = render.predicate({"quad"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    self.shadow_target  = create_rt(512, 512, render.FILTER_LINEAR, true)

    self.w = render.get_window_width()
    self.h = render.get_window_height()
    self.depth_target 	= create_rt(self.w, self.h, render.FILTER_LINEAR, true)
    self.color_target 	= create_rt(self.w, self.h, render.FILTER_LINEAR, true)
    self.normal_target 	= create_rt(self.w, self.h, render.FILTER_LINEAR, true)
    self.pcss_target 	= create_rt(self.w, self.h, render.FILTER_LINEAR)
    
    self.near = 0.1
    self.far = 20
    self.projection_fn = stretch_projection

    self.cb = render.constant_buffer()
    self.light_transform = vmath.matrix4()
    self.light_projection = vmath.matrix4()

    self.bias_matrix    = vmath.matrix4()
    self.bias_matrix.c0 = vmath.vector4(0.5, 0.0, 0.0, 0.0)
    self.bias_matrix.c1 = vmath.vector4(0.0, 0.5, 0.0, 0.0)
    self.bias_matrix.c2 = vmath.vector4(0.0, 0.0, 0.5, 0.0)
    self.bias_matrix.c3 = vmath.vector4(0.5, 0.5, 0.5, 1.0)
end

function render_shadows(self)
    local w = render.get_render_target_width(self.shadow_target, render.BUFFER_DEPTH_BIT)
    local h = render.get_render_target_height(self.shadow_target, render.BUFFER_DEPTH_BIT)

    render.set_projection(self.light_projection)
    render.set_view(self.light_transform)
    render.set_viewport(0, 0, w, h)

    render.set_depth_mask(true)
    render.set_depth_func(render.COMPARE_FUNC_LEQUAL)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_BLEND)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_render_target(self.shadow_target, { transient = {render.BUFFER_DEPTH_BIT} })
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0,0,0,1), [render.BUFFER_DEPTH_BIT] = 1})

    render.enable_material("depth")
    render.draw(self.model_pred)
    render.disable_material()

    render.set_render_target(render.RENDER_TARGET_DEFAULT)
end

function update(self)
    local aspect = self.w / self.h
    local fov = 0.7854
    local T = self.near * math.tan(0.5 * fov)
    local R = aspect * T
    self.cb.righttop = vmath.vector4(R, T, self.near, self.far)

    render_shadows(self)
    
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_viewport(0, 0, self.w, self.h)
    render.set_view(self.view)

    render.set_depth_mask(false)
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_projection(get_projection(self))

    render.draw(self.tile_pred)
    render.draw(self.particle_pred)
    render.draw_debug3d()

    -- render models
    --
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.enable_state(render.STATE_CULL_FACE)
    render.enable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(true)

    render.set_render_target(self.color_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.draw(self.model_pred)
    
    render.disable_state(render.STATE_BLEND)

    render.set_render_target(self.normal_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.enable_material("normal")
    render.draw(self.model_pred)
    render.disable_material()

    render.set_render_target(self.depth_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0), [render.BUFFER_DEPTH_BIT] = 1})
    render.enable_material("depth")
    render.draw(self.model_pred)
    render.disable_material()

    
    local mtx_light = self.bias_matrix * self.light_projection * self.light_transform * vmath.inv(self.view)
    local inv_light = vmath.inv(self.light_transform)
    local light     = vmath.vector4()

    light.x = inv_light.m03
    light.y = inv_light.m13
    light.z = inv_light.m23
    light.w = 0--as light is direction

    self.cb.mtx_light0 = mtx_light.c0
    self.cb.mtx_light1 = mtx_light.c1
    self.cb.mtx_light2 = mtx_light.c2
    self.cb.mtx_light3 = mtx_light.c3
    self.cb.light = light
    
    render.disable_state(render.STATE_DEPTH_TEST)
    render.set_depth_mask(false)

    render.set_render_target(self.pcss_target)
    render.clear({[render.BUFFER_COLOR_BIT] = vmath.vector4(0)})
    render.enable_texture(0, self.shadow_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(1, self.normal_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(2, self.depth_target, render.BUFFER_COLOR_BIT)
    render.draw(self.quad_pred, self.cb)
   
    
    render.set_render_target(render.RENDER_TARGET_DEFAULT)
    render.enable_texture(0, self.color_target, render.BUFFER_COLOR_BIT)
    render.enable_texture(3, self.pcss_target, render.BUFFER_COLOR_BIT)
    render.enable_material("deferred")
    render.draw(self.quad_pred, self.cb)
    render.disable_material()

    render.disable_texture(0)
    render.disable_texture(1)
    render.disable_texture(2)
    render.disable_texture(3)

    -- debug rendering
    --
    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_CULL_FACE)    
    render.draw_debug3d()
    
    -- render GUI
    --
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("set_light_transform") then
        self.light_transform = message.transform
        self.light_direction = message.direction
    elseif message_id == hash("set_light_projection") then
        self.light_projection = message.projection
    end
end
